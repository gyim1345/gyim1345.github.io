{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/2019-12-22-Webpack/","result":{"data":{"markdownRemark":{"id":"c2ad66f3-7d80-5ab8-b741-2a5ae0d4cb3c","html":"<p>Javascript에서 코드들을 만들 때 많은 변수 함수 객체 등을 만들면서 권장사항인 SoC로 만들게 됩니다. 이렇게 만들다 보면 한 파일에다가 다 때려 박고 너무 커지고 나중에 찾아보려면 너무 불편해집니다. 그래서 저희는 파일을 나눠서 새로운 파일들에 SoC에 만족되는 조건으로 만듭니다. 그러나 각각 새로운 파일에다 만들면 작동이 안 되므로 이때 쓰는 게 웹팩입니다.</p>\n<p>웹 팩 요새 가장 많이 사용되는 모듈 번들러 입니다. 모듈 번들러란 말 그대로 모듈들을 번들한다는 말입니다. 즉 모듈들을 하나로 통합한다는 것입니다.</p>\n<p>모듈이란 작은 코드 단위, 함수, 변수 선언, 객체 등이 있고 더 큰 단위로는 코드가 많은 Js 파일 그 자체, 사진, HTML, Font, CSS 등등을 다 모듈이라고 할 수 있습니다.</p>\n<p>이렇게 하나로 통합함으로써 크기, 범위, 가독성, 유지관리 등의 문제들을 해결해줍니다. 안 해줄 시에 scope collision 이 생기고 결국엔 프로젝트는 터질 수 도 있습니다. 통합함으로써 서로 끌어 붙여 연결해줍니다.</p>\n<p>통합 외에도 압축 변환을 해서 로딩 속도를 더욱 높이고 필요 없는 파일들을 나중에 로드 하는 lazy loading 도 합니다.</p>\n<p>웹팩을 사용하기 위해서 <a href=\"../NPM\">NPM</a> 과 <a href=\"../Node.js-&#x26;-asynchronous-event-driven-programming\">Node.js</a> 가 필요합니다.</p>\n<p><img src=\"/img/webpack/webpack.png\" alt=\"webpack\"/></p>\n<p>references</p>\n<p><a href=\"https://webpack.js.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://webpack.js.org/</a></p>\n<p><a href=\"https://joshua1988.github.io/webpack-guide/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://joshua1988.github.io/webpack-guide/</a></p>","fields":{"slug":"/posts/2019-12-22-Webpack/","tagSlugs":null},"frontmatter":{"date":"2019-12-22","description":"웹팩","tags":null,"title":"Webpack","socialImage":null}}},"pageContext":{"slug":"/posts/2019-12-22-Webpack/"}}}