{"expireTime":9007200837854415000,"key":"transformer-remark-markdown-html-75ee13c3af9fa0cdf7948a28bb17a778-gatsby-remark-relative-imagesgatsby-remark-katexgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-external-links-","val":"<blockquote>\n<p>In computer science, functional programming is a programming paradigm—a style of building the structure and elements of computer programs—that treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data. It is a declarative programming paradigm in that programming is done with expressions or declarations<a href=\"https://en.wikipedia.org/wiki/Functional_programming\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">1</a> instead of statements. In functional code, the output value of a function depends only on its arguments, so calling a function with the same value for an argument always produces the same result.\n— <cite><a href=\"https://en.wikipedia.org/wiki/Functional_programming\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Wikipedia</a></cite></p>\n</blockquote>\n<p>함수형 프로그래밍은 이렇게 정의합니다. 번역을해보자면 함수형의 설계 방식은 계산적인 것들은 수학적 함수의 평가로 정의하고 데이터 변이와 상태 변화를 피합니다. 그리고 선언으로 이루어져 있음으로 선언적 함수입니다. 고로 함수는 멱등성을 지킵니다.  </p>\n<p>기능적 프로그래밍에는 가변 변수, 할당, 명령형 구조가 없습니다. 함수에 집중하고 변수들은 어디에서 정의가 되고 다른 함수 내에서도 정의하고 매개변수로 전달이 가능하고 결괏값을 돌려줄 수 있습니다.</p>\n<p>이 함수형 장점이라고 하면 당연히 선언적 함수에서 말했던 장점들과</p>\n<ul>\n<li>\n<p>순수함수는 추론하기가 더 쉽습니다.</p>\n<ul>\n<li>순수 함수는 뭐가 되는지와 안되는지 구분이 되므로 입력과 출력을 확실하게 알 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>테스트가 더 쉽고, 순기능이 속성 기반 테스트와 같은 기술에 잘 적응합니다.</p>\n<ul>\n<li>명령형과 달리 순수 함수는 숨겨진 상태와 side effect에 대하여 걱정을 할 필요가 없습니다.</li>\n</ul>\n</li>\n<li>\n<p>디버깅이 더 간편합니다</p>\n<ul>\n<li>순수 함수로써 입력이 출력을 좌우하므로 디버깅이 쉽습니다.</li>\n</ul>\n</li>\n<li>\n<p>프로그램은 더 안전합니다.</p>\n<ul>\n<li>가변변수와 hidden state가 적습니다.</li>\n</ul>\n</li>\n<li>\n<p>프로그램은 상위 레벨에서 작성되므로 이해하기 쉽습니다.</p>\n<ul>\n<li>코드 그대로 읽기가 쉽습니다.</li>\n</ul>\n</li>\n</ul>\n<p>함수형을 조금 더 코드 레벨로 들어가서 봅시다.</p>\n<p>함수형 프로그래밍은 “first class citizen” 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//변수에 할당</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//객체에 할당</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//배열에 할당</span>\n<span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token parameter\">input</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//함수에 할당</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fn3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fn3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">fn2</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//함수에 return</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token parameter\">input</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> fn <span class=\"token operator\">=</span> <span class=\"token function\">createFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>함수형은 이러한 기능들이 있습니다.</p>\n<p>함수형은 선언적 프로그래밍 접근방식을 쓰고 루프 사용을 피하고 대신 map, reduce 및 filter와 같은 함수형 프로그래밍 구조를 사용합니다. 왜냐하면 이러함으로써 더 추상적이고 덜 복잡하게 프로그램에서 명령을 하달하기 때문입니다.</p>\n<p>함수형의 특징 하나를 더 말하자면 변경불가성입니다. 함수형 프로그래밍에서는 데이터가 절대 변경되지 않습니다. 자료는 불변의 것이고 변수는 바꿀 수 없습니다. 값을 업데이트하려면 새 변수를 생성해야 합니다. 배열에서 새 배열을 만들고 객체는 변경 전 복사가 됩니다.</p>\n<p><code class=\"language-text\">예시</code><br>\narray.push 대신 함수형에서는 concat를 씁니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'asd'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'bcd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// b = ['bcd', 'asd']</span>\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// c = ['asd', '3']</span></code></pre></div>\n<p>위에 말했듯이 데이터들은 복사해서 저장됩니다.</p>\n<p><code class=\"language-text\">예시</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> v <span class=\"token operator\">*</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// b = [0, 2, 6]</span></code></pre></div>\n<p>또 다른 특징중 하나는 recursion 재귀입니다. 자기 자신을 다시 불러오는 게 재귀입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">recursive</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">recursive</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>해서 10이 될 때까지 계속 자신을 불러옵니다.</p>\n<p>다른 특징 중 하나는 Composition입니다. Composition은 함수를 다른 함수 불러와서 쓸 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">obj<span class=\"token punctuation\">.</span><span class=\"token function\">do1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">.</span><span class=\"token function\">do2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>혹은</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">obj<span class=\"token punctuation\">.</span><span class=\"token function\">do1</span><span class=\"token punctuation\">(</span><span class=\"token function\">do2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이러한 장점들과 기능들을 제공함으로써 보다 다방면적으로 코딩을 작성을 할 수 있습니다.</p>\n<p>그래도 누가 뭐라 해도 제일 중요한 이유는 React는 함수형 프로그래밍이기 때문입니다.</p>\n<p>References:</p>\n<p><a href=\"https://danielpedroso.com/2019/02/25/functional-programming-and-react/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://danielpedroso.com/2019/02/25/functional-programming-and-react/</a></p>\n<p><a href=\"https://www.epfl.ch/labs/lamp/wp-content/uploads/2019/01/week1-1-no-annot.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.epfl.ch/labs/lamp/wp-content/uploads/2019/01/week1-1-no-annot.pdf</a></p>\n<p><a href=\"https://1ambda.github.io/scala/functional-programming-1/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://1ambda.github.io/scala/functional-programming-1/</a></p>\n<p><a href=\"https://alvinalexander.com/scala/fp-book/benefits-of-functional-programming\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://alvinalexander.com/scala/fp-book/benefits-of-functional-programming</a></p>\n<p><a href=\"https://flaviocopes.com/javascript-functional-programming/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://flaviocopes.com/javascript-functional-programming/</a></p>\n<p><a href=\"https://reactpatterns.github.io/Functional-setState-(Pass-a-function-to-setState)/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://reactpatterns.github.io/Functional-setState-(Pass-a-function-to-setState)/</a></p>\n<p><a href=\"https://github.com/SeonHyungJo/FE-Dev-Note/blob/master/Functional_Programming/setState.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/SeonHyungJo/FE-Dev-Note/blob/master/Functional_Programming/setState.md</a></p>"}