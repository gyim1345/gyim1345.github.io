{"expireTime":9007200834868342000,"key":"transformer-remark-markdown-html-ast-c8b8b66d5b7b40b40713905ba62cd9da-gatsby-remark-relative-imagesgatsby-remark-katexgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-external-links-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"javascript는 다양한 runtime(실행 환경)에서 실행됩니다. runtime에 따라 작동 양식이 다른데 그중에서 제일 많이 쓰이는 게 nodejs입니다.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":91,"offset":91}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":91,"offset":91}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Node.js는 비동기식 이벤트 기반 JavaScript 런타임입니다. 그리고 이것으로 확장 가능한 네트워크 애플리케이션을 구축하도록 설계되었습니다. 이걸로  브라우저 밖에서도 작동하게 되었습니다.","position":{"start":{"line":4,"column":1,"offset":93},"end":{"line":4,"column":111,"offset":203}}}],"position":{"start":{"line":4,"column":1,"offset":93},"end":{"line":4,"column":111,"offset":203}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Node.js를 씀으로써 프로세스 교착 상태(dead-locking)으로부터 자유롭습니다. 직접적으로 I/O를 하지 않으므로 blocking 을 안 당합니다. 고로, 확장 가능한 시스템은 개발하기에 매우 좋습니다.","position":{"start":{"line":6,"column":1,"offset":205},"end":{"line":6,"column":120,"offset":324}}}],"position":{"start":{"line":6,"column":1,"offset":205},"end":{"line":6,"column":120,"offset":324}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I/O는 libuv가 지원하는 시스템의 디스크 및 네트워크와의 상호작용을 말합니다.","position":{"start":{"line":8,"column":1,"offset":326},"end":{"line":8,"column":47,"offset":372}}}],"position":{"start":{"line":8,"column":1,"offset":326},"end":{"line":8,"column":47,"offset":372}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"blocking 이란 추가적인 JavaScript의 작업이 JavaScript 외 작업이 완료 될 때 가지 기다리는 것입니다.","position":{"start":{"line":10,"column":1,"offset":374},"end":{"line":10,"column":71,"offset":444}}}],"position":{"start":{"line":10,"column":1,"offset":374},"end":{"line":10,"column":71,"offset":444}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Node.js는 이런 blocking 와 non-blocking 메서드를 둘 다 쓸 수 있습니다. blocking 을 쓴다면 동기 처리 프로그램. non-blocking 을 쓴다면 비동기 처리 프로그램. 둘 다 각각 Sync 와 Async 메서드를 씁니다.","position":{"start":{"line":12,"column":1,"offset":446},"end":{"line":12,"column":144,"offset":589}}}],"position":{"start":{"line":12,"column":1,"offset":446},"end":{"line":12,"column":144,"offset":589}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"코드 면에서 sync는 결괏값이 올 때까지 기다립니다","position":{"start":{"line":14,"column":1,"offset":591},"end":{"line":14,"column":30,"offset":620}}}],"position":{"start":{"line":14,"column":1,"offset":591},"end":{"line":14,"column":30,"offset":620}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"asyc는 결괏값이 안 와도 다른 작업을 실행할 수 있습니다.","position":{"start":{"line":16,"column":1,"offset":622},"end":{"line":16,"column":35,"offset":656}}}],"position":{"start":{"line":16,"column":1,"offset":622},"end":{"line":16,"column":35,"offset":656}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"async 예를 들자면 카드 결제하면 결제 프로세스가 다 될 때까지 기다리지 않고 다른 작업을 할 수도 있습니다.","position":{"start":{"line":18,"column":1,"offset":658},"end":{"line":18,"column":64,"offset":721}}}],"position":{"start":{"line":18,"column":1,"offset":658},"end":{"line":18,"column":64,"offset":721}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"sync 예시를 들면 그러나 마트 가서 현금을 내면 현금을 거슬러 줄 때 가지 아무것도 못합니다.","position":{"start":{"line":20,"column":1,"offset":723},"end":{"line":20,"column":55,"offset":777}}}],"position":{"start":{"line":20,"column":1,"offset":723},"end":{"line":20,"column":55,"offset":777}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"그래서 위에 예시를 봤듯이 저희는 기다리지 않고 계속 이어서 다른 작업을 하기 원하므로 비동기async를 지향합니다.","position":{"start":{"line":22,"column":1,"offset":779},"end":{"line":22,"column":66,"offset":844}}}],"position":{"start":{"line":22,"column":1,"offset":779},"end":{"line":22,"column":66,"offset":844}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"비동기 처리 방식으로 처음으로 나왔던 게 콜벡입니다.\n콜백은 함수에 써서 콜백 함수로 불렸습니다. 그러나 문제가 콜백을 중복으로 쓸 때 가독성이 너무나도 떨어지고 결국엔 콜백헬이라는 게 생겼습니다.\n예를 들어서 a->b->c->d 순으로 실행하려고 할 때 a(b(c(d)))로 해야 돼서 많이 쓸수록 가독성이 너무나도 떨어졌습니다.","position":{"start":{"line":24,"column":1,"offset":846},"end":{"line":26,"column":75,"offset":1031}}}],"position":{"start":{"line":24,"column":1,"offset":846},"end":{"line":26,"column":75,"offset":1031}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">예시</code>","position":{"start":{"line":28,"column":1,"offset":1033},"end":{"line":28,"column":5,"offset":1037}}}],"position":{"start":{"line":28,"column":1,"offset":1033},"end":{"line":28,"column":5,"offset":1037}}},{"type":"text","value":"\n"},{"type":"raw","value":"<p><img src=\"/img/webpack/callback.png\" alt=\"callBackHell\"/></p>","position":{"start":{"line":29,"column":1,"offset":1038},"end":{"line":29,"column":65,"offset":1102}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"그래서 나온 게 promise 이긴 한데\npromise a.then(c) =>).then … 해서 길어지면 치기 힘들어집니다.","position":{"start":{"line":31,"column":1,"offset":1104},"end":{"line":32,"column":51,"offset":1177}}}],"position":{"start":{"line":31,"column":1,"offset":1104},"end":{"line":32,"column":51,"offset":1177}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n  <span class=\"token keyword\">return</span> result <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">/</span>\n\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n  <span class=\"token keyword\">return</span> result <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\n  <span class=\"token keyword\">return</span> result <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":34,"column":1,"offset":1179},"end":{"line":55,"column":4,"offset":1474}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"그래서 결국에 나온 게 Async Await","position":{"start":{"line":57,"column":1,"offset":1476},"end":{"line":57,"column":25,"offset":1500}}}],"position":{"start":{"line":57,"column":1,"offset":1476},"end":{"line":57,"column":25,"offset":1500}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> _ <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token parameter\">_</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n  <span class=\"token keyword\">await</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  \n  <span class=\"token keyword\">await</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":59,"column":1,"offset":1502},"end":{"line":69,"column":4,"offset":1702}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"그러면 더 깔끔하게 나옵니다. 이렇게 async/await 메서드를 써서 복잡도를 해소되고 가독성이 더욱 높아졌습니다. 난이도도 동기 프로그래밍만큼 쉬워졌습니다.","position":{"start":{"line":71,"column":1,"offset":1704},"end":{"line":71,"column":91,"offset":1794}}}],"position":{"start":{"line":71,"column":1,"offset":1704},"end":{"line":71,"column":91,"offset":1794}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://nodejs.org/en/about/","target":"_blank","rel":"nofollow noopener noreferrer"},"children":[{"type":"text","value":"https://nodejs.org/en/about/","position":{"start":{"line":73,"column":2,"offset":1797},"end":{"line":73,"column":30,"offset":1825}}}],"position":{"start":{"line":73,"column":1,"offset":1796},"end":{"line":73,"column":31,"offset":1826}}}],"position":{"start":{"line":73,"column":1,"offset":1796},"end":{"line":73,"column":31,"offset":1826}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"http://rossboucher.com/await/#/1","target":"_blank","rel":"nofollow noopener noreferrer"},"children":[{"type":"text","value":"http://rossboucher.com/await/#/1","position":{"start":{"line":75,"column":2,"offset":1829},"end":{"line":75,"column":34,"offset":1861}}}],"position":{"start":{"line":75,"column":1,"offset":1828},"end":{"line":75,"column":35,"offset":1862}}}],"position":{"start":{"line":75,"column":1,"offset":1828},"end":{"line":75,"column":35,"offset":1862}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":75,"column":35,"offset":1862}}}}