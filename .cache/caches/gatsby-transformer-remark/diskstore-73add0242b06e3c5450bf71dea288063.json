{"expireTime":9007200834867749000,"key":"transformer-remark-markdown-html-ast-4ebc3701c73b7475a481c6e95dc8149a-gatsby-remark-relative-imagesgatsby-remark-katexgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-external-links-/gyim1345.github.io","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"선언적 프로그래밍은 제어 흐름을 설명하지 않고 계산의 논리를 표현하는 프로그래밍 패러다임이다.\n임페어티브 프로그래밍은 프로그램 상태를 바꾸는 문장을 사용하는 프로그래밍 패러다임이다.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":3,"column":49,"offset":102}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":3,"column":49,"offset":102}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"조금 더 명확한 예시를 보자면, 서울역에 어떻게 가냐고 물어보면 선언형 프로그래밍은 서울특별시 용산구 동자동 43-205로 대답하고 명령형은 현재 위치가 왕십리라고 치면 왕십리에서 2호선 전철을 타서 시청역까지 간 다음에 시청역에서 1호선으로 갈아탄 후에 서울역까지 가면 된다가 명령형입니다.","position":{"start":{"line":5,"column":1,"offset":104},"end":{"line":5,"column":164,"offset":267}}}],"position":{"start":{"line":5,"column":1,"offset":104},"end":{"line":5,"column":164,"offset":267}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"예시를 봅시다.","position":{"start":{"line":7,"column":1,"offset":269},"end":{"line":7,"column":9,"offset":277}}}],"position":{"start":{"line":7,"column":1,"offset":269},"end":{"line":7,"column":9,"offset":277}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">///명령형</span>\n<span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span>‘container’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>‘button’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbtn<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> ‘red’<span class=\"token punctuation\">;</span>\nbtn<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>‘red’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>‘red’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>‘blue’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>‘blue’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>‘red’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ncontainer<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>btn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":9,"column":1,"offset":279},"end":{"line":24,"column":4,"offset":671}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//선언형</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> color<span class=\"token operator\">:</span> <span class=\"token string\">'red'</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">handleChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>color <span class=\"token operator\">===</span> <span class=\"token string\">'red'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'blue'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> color <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button \n         className<span class=\"token operator\">=</span>btn $<span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">}</span>\n         onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":26,"column":1,"offset":673},"end":{"line":43,"column":4,"offset":1051}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"여기에서 차이점은 react는 요소를 직접 건드리지 않습니다. state를 주고 그것을 요소에 rendering 해야 한다고 선언할 뿐입니다. 결국엔 DOM 자체를 조작하지 않습니다.","position":{"start":{"line":45,"column":1,"offset":1053},"end":{"line":45,"column":103,"offset":1155}}}],"position":{"start":{"line":45,"column":1,"offset":1053},"end":{"line":45,"column":103,"offset":1155}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"다른 예시를 봅시다.","position":{"start":{"line":47,"column":1,"offset":1157},"end":{"line":47,"column":12,"offset":1168}}}],"position":{"start":{"line":47,"column":1,"offset":1157},"end":{"line":47,"column":12,"offset":1168}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Imperative 명령형</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">imperative_search</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> item<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> item\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Declarative 선언형</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">declarative_search</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  array<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//Imperative 명령형</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">addNameToBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> bodyTag <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> divTag <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> h1Tag <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">)</span>\n  h1Tag<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token string\">\"asd\"</span>\n  divTag<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>h1Tag<span class=\"token punctuation\">)</span>\n  bodyTag<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>divTag<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">//Declarative 선언형</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Add</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":49,"column":1,"offset":1170},"end":{"line":85,"column":4,"offset":1833}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"위에 예제들을 보시다시피 명령형 예제들은 어떻게 함수들을 돌릴 건지 세세하게 선언을 합니다.","position":{"start":{"line":87,"column":1,"offset":1835},"end":{"line":87,"column":52,"offset":1886}}},{"type":"element","tagName":"br","properties":{},"children":[],"position":{"start":{"line":87,"column":52,"offset":1886},"end":{"line":88,"column":1,"offset":1889}}},{"type":"text","value":"\n"},{"type":"text","value":"그러나 선언형 예제들을 그냥 무엇을 하라는 것만 나오죠, array.find가 어떻게 돌아가는지 모르겠지만 그래도 무엇을 기대 할 수 있는지는 아는 것처럼.","position":{"start":{"line":88,"column":1,"offset":1889},"end":{"line":88,"column":88,"offset":1976}}}],"position":{"start":{"line":87,"column":1,"offset":1835},"end":{"line":88,"column":88,"offset":1976}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>Btn\n  onToggleHighlight<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleToggleHighlight<span class=\"token punctuation\">}</span>\n  highlight<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>highlight<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>buttonText<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Btn<span class=\"token operator\">></span></code></pre></div>","position":{"start":{"line":90,"column":1,"offset":1978},"end":{"line":96,"column":4,"offset":2120}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"React는 이러한 선언적 사용자 인터페이스를 만들 수 있습니다. Btn 구성요소를 보면 UI가 어떻게 보일지 금방 알 수 있다. 또 다른 이점은 DOM에 저장하는 대신 React 구성 요소 자체에 저장하는 것입니다.","position":{"start":{"line":98,"column":1,"offset":2122},"end":{"line":98,"column":122,"offset":2243}}}],"position":{"start":{"line":98,"column":1,"offset":2122},"end":{"line":98,"column":122,"offset":2243}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"보시다시피 선언형 코드는 프로그램이 문맥에 구애받지 않는 context-independent이다는  것입니다. 설명하자면 같은 코드를 다른 프로그램에서 사용할 수 있고 잘 작동한다는 것을 의미합니다.","position":{"start":{"line":100,"column":1,"offset":2245},"end":{"line":100,"column":112,"offset":2356}}}],"position":{"start":{"line":100,"column":1,"offset":2245},"end":{"line":100,"column":112,"offset":2356}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"선언형의 장점들은 아래와 같습니다.","position":{"start":{"line":102,"column":1,"offset":2358},"end":{"line":102,"column":20,"offset":2377}}}],"position":{"start":{"line":102,"column":1,"offset":2358},"end":{"line":102,"column":20,"offset":2377}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"사용성: 코드가 자연 언어인 영어에 가깝기 때문에 더 읽기 쉽고 또한 프로그래머가 아닌 사람들이 배우기가 더 쉽습니다.","position":{"start":{"line":104,"column":3,"offset":2381},"end":{"line":104,"column":69,"offset":2447}}}],"position":{"start":{"line":104,"column":1,"offset":2379},"end":{"line":104,"column":69,"offset":2447}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"명료: 추상화되어 같은 일을 할 수 있는 줄이 줄어들게 됩니다.","position":{"start":{"line":105,"column":3,"offset":2450},"end":{"line":105,"column":38,"offset":2485}}}],"position":{"start":{"line":105,"column":1,"offset":2448},"end":{"line":105,"column":38,"offset":2485}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"재사용성: 다른 용도로 같은 코드로 재사용이 용이 하다.","position":{"start":{"line":106,"column":3,"offset":2488},"end":{"line":106,"column":34,"offset":2519}}}],"position":{"start":{"line":106,"column":1,"offset":2486},"end":{"line":106,"column":34,"offset":2519}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"referential 투명성: 수동적인 상태 관리를 최소화한다.","position":{"start":{"line":107,"column":3,"offset":2522},"end":{"line":107,"column":38,"offset":2557}}}],"position":{"start":{"line":107,"column":1,"offset":2520},"end":{"line":107,"column":38,"offset":2557}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Commutativity: 실제 구현 순서를 명시하지 않아도 종료 상태를 표현이 가능하다.","position":{"start":{"line":108,"column":3,"offset":2560},"end":{"line":108,"column":53,"offset":2610}}}],"position":{"start":{"line":108,"column":1,"offset":2558},"end":{"line":108,"column":53,"offset":2610}}},{"type":"text","value":"\n"}],"position":{"start":{"line":104,"column":1,"offset":2379},"end":{"line":108,"column":53,"offset":2610}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"React는 함수형 프로그래밍이고 함수형 프로그래밍은 선언적 프로그래밍의 일부분입니다. 고로 react를 쓸려면 선언적 프로그래밍을 아는 게 좋죠.","position":{"start":{"line":110,"column":1,"offset":2612},"end":{"line":110,"column":83,"offset":2694}}}],"position":{"start":{"line":110,"column":1,"offset":2612},"end":{"line":110,"column":83,"offset":2694}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"References:\n","position":{"start":{"line":112,"column":1,"offset":2696},"end":{"line":113,"column":1,"offset":2708}}},{"type":"element","tagName":"a","properties":{"href":"https://codeburst.io/declarative-vs-imperative-programming-a8a7c93d9ad2","target":"_blank","rel":"nofollow noopener noreferrer"},"children":[{"type":"text","value":"https://codeburst.io/declarative-vs-imperative-programming-a8a7c93d9ad2","position":{"start":{"line":113,"column":2,"offset":2709},"end":{"line":113,"column":73,"offset":2780}}}],"position":{"start":{"line":113,"column":1,"offset":2708},"end":{"line":113,"column":74,"offset":2781}}}],"position":{"start":{"line":112,"column":1,"offset":2696},"end":{"line":113,"column":74,"offset":2781}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://medium.com/@myung.kim287/declarative-vs-imperative-251ce99c6c44","target":"_blank","rel":"nofollow noopener noreferrer"},"children":[{"type":"text","value":"https://medium.com/@myung.kim287/declarative-vs-imperative-251ce99c6c44","position":{"start":{"line":115,"column":2,"offset":2784},"end":{"line":115,"column":73,"offset":2855}}}],"position":{"start":{"line":115,"column":1,"offset":2783},"end":{"line":115,"column":74,"offset":2856}}}],"position":{"start":{"line":115,"column":1,"offset":2783},"end":{"line":115,"column":74,"offset":2856}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.toptal.com/software/declarative-programming","target":"_blank","rel":"nofollow noopener noreferrer"},"children":[{"type":"text","value":"https://www.toptal.com/software/declarative-programming","position":{"start":{"line":117,"column":2,"offset":2859},"end":{"line":117,"column":57,"offset":2914}}}],"position":{"start":{"line":117,"column":1,"offset":2858},"end":{"line":117,"column":58,"offset":2915}}}],"position":{"start":{"line":117,"column":1,"offset":2858},"end":{"line":117,"column":58,"offset":2915}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://tylermcginnis.com/imperative-vs-declarative-programming/","target":"_blank","rel":"nofollow noopener noreferrer"},"children":[{"type":"text","value":"https://tylermcginnis.com/imperative-vs-declarative-programming/","position":{"start":{"line":119,"column":2,"offset":2918},"end":{"line":119,"column":66,"offset":2982}}}],"position":{"start":{"line":119,"column":1,"offset":2917},"end":{"line":119,"column":67,"offset":2983}}}],"position":{"start":{"line":119,"column":1,"offset":2917},"end":{"line":119,"column":67,"offset":2983}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":119,"column":67,"offset":2983}}}}