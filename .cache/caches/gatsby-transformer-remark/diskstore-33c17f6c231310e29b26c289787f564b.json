{"expireTime":9007200837854416000,"key":"transformer-remark-markdown-html-74f1cca656361728d29c0a1bc5992dd6-gatsby-remark-relative-imagesgatsby-remark-katexgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-external-links-","val":"<h2 id=\"json\" style=\"position:relative;\"><a href=\"#json\" aria-label=\"json permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSON</h2>\n<p>JSON(JavaScript Object Notation)은 데이터를 기술하기 위한 언어다. JavaScript의 기법으로 데이터를 기술할 수 있다. 심플해서 다른 언어로도 라이브러리로써 제공이 되고 많이 활용이 되고 있다.<br>\nJSON의 미디어 타입은 application/json입니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Content<span class=\"token operator\">-</span>Type<span class=\"token operator\">:</span> application<span class=\"token operator\">/</span>json<span class=\"token punctuation\">;</span> charset<span class=\"token operator\">=</span>utf<span class=\"token operator\">-</span><span class=\"token number\">8</span></code></pre></div>\n<p>JSON 파일의 확장자는 .json 이다.  </p>\n<p>JSON에 6가지의 자료형이 있다.</p>\n<ul>\n<li>object</li>\n<li>array</li>\n<li>string</li>\n<li>number</li>\n<li>boolean</li>\n<li>null</li>\n</ul>\n<p>object는 이름과 값의 집합이고 그 집합을 member이라고 한다. member의 이름은 무조건 문자열이고 member의 값은 위 6개 중 아무거나 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        first<span class=\"token operator\">:</span> <span class=\"token string\">'gibong'</span>\n        last<span class=\"token operator\">:</span> <span class=\"token string\">'yim'</span>\n    <span class=\"token punctuation\">}</span>\n        age<span class=\"token operator\">:</span> <span class=\"token number\">30</span>\n        isAlive<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n        placeTraveled<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'America'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'China'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'SouthEast Asia'</span><span class=\"token punctuation\">]</span>\n        friends<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>등으로 작성을 할 수 있다.</p>\n<p>시간을 표현할 때 Unix 시간으로 시간을 표현하는데 이는 UTC(Universal Time Coordinate)인 1970년 1월 1일 시점부터 어느 정도 시간이 지났는지 나타낸다. 나라마다 시간이 다르므로 이것으로 표현하고 나중에 따로 각 국가의 GMT로 설정을 하든가 한다. </p>\n<p>Ajax에서 이용하는 XMLHttpRequest라는 JavaScript 모듈은 보안상의 제한으로 인하여 서버와 통신할 때는 하나의 동일한 서버와 통신할 수밖에 없었다. 크로스 도메인 통신이 안되었다. 그래서 보안 제한을 받지 않는 &#x3C;script> 요소를 써서 이 문제를 대처하였다. 이러한 방법으로 JSONP를 써서 CORS를 형성한다. CORS는 Cross-Origin Resource Sharing의 약자다. 위에 말했듯이 브라우저는 크로스 도메인 통신을 보안상 막는데 CORS 방식으로 헤더에 브라우저에게 다른 도메인의 정보들을 가져오게 한다. </p>\n<h2 id=\"리소스-설계\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%86%8C%EC%8A%A4-%EC%84%A4%EA%B3%84\" aria-label=\"리소스 설계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리소스 설계</h2>\n<p>리소스 설계란 클라이언트와 서버 간 인터페이스의 설계이다. 웹 서비스와 웹 API의 외부설계이다. 어떻게 리소스를 분할하고, URI로 이름을 붙이고, 상호 링크를 가지게 할지가 리소스 설계의 악심이다.  </p>\n<p>리소스 설계할 때 리소스 지향 아키텍처</p>\n<ul>\n<li>웹 서비스에서 제공할 데이터를 특정한다.  </li>\n<li>데이터를 리소스로 나눈다.  </li>\n<li>리소스에 URI로 이름을 부여한다.  </li>\n<li>클라이언트에 제공할 리소스의 표현을 설계한다.  </li>\n<li>링크와 폼을 이용해 리소스와 리소스를 연결한다.  </li>\n<li>이벤트의 표준적인 코스를 검토한다.  </li>\n<li>에러에 대한 검토한다  </li>\n</ul>\n<p>리소스란 웹상에 존재하는 이름이 부여된 정보이다.<br>\n리소스는 URI로 이름을 부여를 할 수 있다.<br>\n예를 들어서 정보를 한곳에 저장하고 그 URI를 ”…/data/124125”로 하면 그 정보들은 124125라는 식별 문의 붙여진다, 고로 이름 부여가 된다. </p>\n<p>클라이언트에 제공할 리소스의 표현할 때 많은 방법이 있다. 독자 XML, XHTML, Atom, Json, YAML, CSV, multimedia 등이 있다. 하나의 리소스가 복수의 포맷을 지원하면 좋다. XHTML은 XML을 이용하여 HTML 4.0.1을 새로 만든 독립 언어이다. 현제는 HTML5 가 대세이므로 굳이 쓸 필요가 없다. Json은 내용이 함축적으로 최소한의 정보만을 가지고 있다. 그렇기 때문에 XML에 비해 용량이 줄어들고 그만큼 빠른 속도를 가지게 된다. 언어에 독립적이며, 사용하기가 쉽다.  YAML은 읽기 쉽고 쓰기도 편하고 한글과 같은 유니코드를 그대로 사용할 수 있다. CSV는 ”,”로 모든 것을 분리하므로 읽기 소프트웨어를 쓸 때 좋다.</p>\n<p>링크와 폼을 이용해 리소스와 리소스를 연결할 때는 보통 XML은 </p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span> <span class=\"token punctuation\">\"</span>http://....<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>로 표현하고 </p>\n<p>JSON 같은 경우에는 </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">\"link\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://...\"</span></code></pre></div>\n<p>로한 다. </p>\n<p>이벤트의 표준적인 코스를 검토할 때 폼에 입력값을 입력해서 원하는 리소스를 취득하면 된다. 그리고 에러가 뜰 때를 생각해서 404, 400, 405 등을 에러에 따라 반환하는 작업을 해야 한다.  </p>\n<h2 id=\"쓰기-가능한-웹-서비스의-설계\" style=\"position:relative;\"><a href=\"#%EC%93%B0%EA%B8%B0-%EA%B0%80%EB%8A%A5%ED%95%9C-%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%9D%98-%EC%84%A4%EA%B3%84\" aria-label=\"쓰기 가능한 웹 서비스의 설계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쓰기 가능한 웹 서비스의 설계</h2>\n<p>읽기 전용과 달리 쓰기는 조금 더 고려할 사항이 있다. 예를 들어서 동시 수정 같은 것들을 어떻게 처리해야 할지 고민을 해봐야 한다. </p>\n<p>리소스 작성할 때 팩토리 리소스에 POST 혹은 PUT이 있다. 팩토리 리소스는 리소스를 작성하기 위한 특별한 리소스이다. 사전 준비된 리소스에 POST로 새로운 리소스를 추가한다. PUT은 새로 작성하고 싶은 리소스의 URU에 직접 요청을 보냅니다. 이러한 방법은 POST를 지원하지 않아도 되고 클라이언트가 작성과 변경을 구별할 필요가 없어서 서버 측의 구현이 간단해진다. 단 클라이언트가 URI 구조를 미리 알아야 하고 신규 작성인지 갱신인지 모른다. </p>\n<p>리소스 갱신할 때는 PUT으로 수행하고 일괄 갱신은 POST로 한다. 그러나 요즘은 PATCH로 갱신을 한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">PUT /<span class=\"token number\">999999</span> HTTP/<span class=\"token number\">1.1</span>\nHost<span class=\"token operator\">:</span> ...\nContent-Type<span class=\"token operator\">:</span> application/json\n\n<span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"zipcode\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"99999\"</span>\n    <span class=\"token property\">\"address\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"prefecture\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"city\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"town\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"c\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"hhi\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"prefecture\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"aaa\"</span>\n        <span class=\"token property\">\"city\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"bbb\"</span>\n        <span class=\"token property\">\"town\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"ccc\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이런 코드에서 한 줄 바꿔서 보내면 벌크 업데이트라고 한다.\n아니면 아래처럼 한 줄만 바꿔서 보내는 게 파설 업데이트다 </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">PUT /999999 HTTP/1.1\nHost: ...\nContent-Type: application/json\n\n    &quot;hhi&quot;:{\n        &quot;prefecture&quot;:&quot;ㅁㅁㅁ&quot;\n        &quot;city&quot;:&quot;ㅠㅠㅠ&quot;\n    }</code></pre></div>\n<p>갱신할 수 없을 때를 고려해서 반환값을 지정해 주는 것도 좋다.</p>\n<p>리소스 삭제는 삭제하고 싶은 리소스의 URI에 delete를 보내서 삭제를 하면 된다. 그리고 일반적으로 부모 리소스에 소속된 자식 리소스는 부모 리소스가 삭제되면 따라서 삭제가 된다. 리소스를 일괄 처리할 시에는 post를 쓰고 다 붙여서 쓰면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">PUT /<span class=\"token number\">999999</span> HTTP/<span class=\"token number\">1.1</span>\nHost<span class=\"token operator\">:</span> ...\nContent-Type<span class=\"token operator\">:</span> application/json\n\n<span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"zipcode\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"99999\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"address\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"prefecture\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"city\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"town\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"c\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"hhi\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"prefecture\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"city\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"bbb\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"town\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"ccc\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"zipcode\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"99998\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"address\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"prefecture\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"city\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"town\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"ㅇ\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"hhi\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"prefecture\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"city\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"bbb\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"town\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"ㅇㅇㅇ\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>일괄처리를 transaction 화하여 도중에 처리를 실패할 경우에 아무것도 처리를 안 했다는 보증을 한다. </p>\n<p>트랜잭션이란 요청이나 반영한 곳에서 이벤트가 생겼을 시에 양쪽 처리가 모두 성공하거나 실패했을 경우에 둘 다 원래대로 돌아가게끔 보증하는 것이다. 문제가 있을 시에는 rollback를 하고 성공할 시에는 commit을 한다. </p>\n<p>요즘은 하나의 클라이언트만 상대하지 않고 다수를 제어를 해야 한다. 이때 들어오는 게 배타 제어이다. 베타 제어는 리소스 편집해 경합이 일어나지 않도록 하나의 클라이언트만 편집 가능하도록 제어 처리하는 개념이다. 이 제어 방법은 비관적 장금과 낙관적 잠금이 있다. 비관적 잠금은 하나의 클라이언트가 사용 중일 시에 다른 클라이언트는 리소스를 불러올 수는 있지만 그 외의 수정 등은 못한다. 수정 중인 클라이언트는 언락을 보내서 다시 다른 사용자가 쓸 수 있게끔 잠금을 푼다. 낙관적 잠금은 ETag를 줘서 먼저 수정 한 사용자는 바로 갱신을 하고 나중에 수정을 요청한 사용자에게 경합을 일으킬 시에 갱신, 삭제, 별도로 리소스 보존, 혹은 병합을 촉구한다.</p>\n<p>설계할 때 밸런스를 잘 잡아야 한다. 될 수 있으면 심플하게 만들고 막히면 리소스로 돌아가 생각하자. 검색 기능을 구현한다고 치면 검색 기능을 구현한다고 생각하지 말고 그 리소스를 get 한다는 식으로 사고하자.</p>\n<h2 id=\"리소스의-설계\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%86%8C%EC%8A%A4%EC%9D%98-%EC%84%A4%EA%B3%84\" aria-label=\"리소스의 설계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리소스의 설계</h2>\n<p>리소스 설계도 RESTful이 권장된다. 리소스를 설계할 때 웹서비스에서 제공할 데이터를 특정하는 방법과 데이터를 리소스로 나누는 방법을 알 수 없다. 이것을 설계하기 위해서 설계하는 게 리소스 설계이다. 그 방법은 3가지가 있다</p>\n<ul>\n<li>관계 모델 ER(Entity Relation) 다이어그램</li>\n<li>객체 지향 모델의 클래스 다이어그램</li>\n<li>정보 아키텍처</li>\n</ul>\n<p>관계 모델 다이어그램은 중심이 되는 데이터에 다른 데이터에 링크 되는 foriegn key를 넣어서 꼬리 연결식으로 데이터들을 링크한다. 이는 데이터의 중복을 생략하기 위해서 한 정규화이다. 그러나 restul 한 아키텍처를 만듦으로써 데이터를 불러올 시에 모든 데이터를 다 다시 불러옴으로써 정규화를 무의미하게 만든다. </p>\n<p>객체지향 모델은 설계 대상의 시스템의 분석 모델을 객체지향 언어의 클래스와 인스턴스로 만든다. 클래스로 만들 때 계층별로 만들고 그 계층별 관계를 사용한다. </p>\n<p>정보 아키텍처는 웹에서 보이는 정보 구조이다. 웹에서 정보가 어떻게 구성되어 있는지 보여주고 사용자들이 그 구조에 따라 원하는 정보의 구조로 이동할 수 있게끔 만든 것이다.</p>"}