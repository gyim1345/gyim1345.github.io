{"expireTime":9007200834868342000,"key":"transformer-remark-markdown-html-37728c07c5faceafe129eeed066c853a-gatsby-remark-relative-imagesgatsby-remark-katexgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-external-links-","val":"<p>   오늘은 todo list 에서 나오는 메소드 밑 함수들을 새로운 js 파일로 불러와 어떤 기능들을 하는지 배우고 익숙해 지기 위해서 실험을 했습니다.</p>\n<hr>\n<h3>Facts</h3>\n<p><a href=\"https://joshua1988.github.io/web-development/translation/essential-es6-features-for-vuejs/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">화살표 함수</a></p>\n<p>자바스크립트에서 함수를 생성하기 위해서는 주로 function 키워드를 사용합니다.\nfunction 키워드는 2가지 방법으로 함수를 생성할 수 있는데요, </p>\n<li>함수 선언(Function Declaration) </li>\nfunction sayHi(){ \n  console.log(\"hi!\");\n}\n<li>함수 표현(Function Expression) //무명(anonymous:이름이 없음) 함수를 생성한 후 변수에 담는 방식입니다.</li>\nvar sayHi2 = function(){\n  console.log(\"hi!\");\n};\nvar sayHi2 = () => console.log(\"hi!\");\n<p> 화살표 함수는 무명 함수를 생성하는 방법 중의 하나로 기본 형태는  (파라메터1, 파라메터2,…) => { 함수내용 }입니다.</p>\n<ol>\n<li>함수 내용이 한줄인 경우 함수내용을 감싸는 {}를 사용하지 않아도 됩니다.</li>\n<li>{}가 없는 경우 해당 함수의 실행결과를 자동으로 이천 합니다.</li>\n<li>함수 내용이 한줄 이상인 경우 return을 사용해서 결과를 리턴합니다.</li>\n<li>파라메터가 한개인 경우 파라메터를 감싸는 ()를 생략할 수 있습니다. (파라메터가 없는 경우에는 위의 sayHi2의 경우 처럼 파라메터 없이 빈 ()를 표시하여야 합니다.)</li>\n</ol>\n<li>함수 표현</li>\nfilteredArray = myArray.filter(function(element){\n  return element > 2;\n});\n<li>화살표 함수</li>\nfilteredArray = myArray.filter(element => element > 2);\n<li> 일반적인 자바스크립트 함수(ES5)</li>\n<p>function (인자) {\n함수 로직\n}</p>\n<li> 화살표 함수(ES6)</li>\n<p>(인자) => {\n함수 로직\n}</p>\n<p><a href=\"https://delirussum.tistory.com/35\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">input 태그</a></p>\n<li>input : 평범하게 글자나 텍스트칸을 넣을 수있는 공간이 생기죠.</li>\n<li>input type=\"\"   : 기존의 input에다가 type를 지정하여 type의 옵션을 넣으면,\n다양한 모양이 됩니다. 단 입력이나 기타 등등의 모양 꼴로 변하죠.</li>\n<li>input type=\"checkbox\" : 이건 체크박스로 나타납니다.</li>\n<p><a href=\"https://stackoverflow.com/questions/23433415/html-with-attributes-starting-with-data?noredirect=1&#x26;lq=1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">커스텀 데이터 data-x</a></p>\n<li>Simply, the specification for custom data attributes states that any attribute that starts with “data-” will be treated as a storage area for private data (private in the sense that the end user can’t see it – it doesn’t affect layout or presentation). This allows you to write valid HTML markup (passing an HTML 5 validator) while, simultaneously, embedding data within your page. </li>\n<p>[dom.value]</p>\n<p>dom.value 불러 오는 형식이 </p>\n<li>let tagnamevalue =document.write(Number(tagnamevalue[0].value));</li>\n<li>let ElementIdValue = document.getElementById(\"num1\").value;</li>\n<li>let ClassIdValue = document.getElementsByClassName('numbers')[2].value;</li>\n<p>이런 식으로 해야한다.\ntargetname 과 ClassName 은 고유 데이터가 아니고 shared 이므로 array 이고 그러므로 [] 를 써야지 제대로 작성이 된다.</p>\n<p><a href=\"https://bblog.tistory.com/300\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">findIndex()</a></p>\n<li>findIndex() 메서드는 주어진 판별 함수를 만족하는 배열의 첫 번째 요소에 대한 인덱스를 반환합니다. 만족하는 요소가 없으면 -1을 반환합니다.</li>\n<hr>\n<p>Feelings: 많이 배워 갑니다.</p>\n<hr>\n<p>Findings: 그냥 보는것 보단 치는게 낫네요</p>\n<hr>\n<p>Future Action Plan: 좀더 많이 치고 봅시다. 주말에 TIL 고치겠습니다.</p>\n<hr>\n<p>Feedback: 우와 목요일이다.</p>\n<hr>"}