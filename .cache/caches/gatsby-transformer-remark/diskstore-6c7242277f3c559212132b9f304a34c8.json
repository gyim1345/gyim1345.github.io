{"expireTime":9007200834868342000,"key":"transformer-remark-markdown-html-34a301da77474401cbe3a58596939dba-gatsby-remark-relative-imagesgatsby-remark-katexgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-external-links-","val":"<br/>\n&nbsp;&nbsp; 안녕하세요 코딩 배운지 1주일 됬습니다! 설명들이 조금 부족할수도 있지만 도움 되시길!<br/><br/>\n&nbsp;&nbsp;이번주에는 블로그를 조금 만지고 그 후에 js 와 html 로 todolist 를 만들면서 그 과정에 js 와 html 에 익숙해지는 과정을 가졌습니다. 그 과정에서 필요 했던 정보들을 나열하겠습니다.\n<br/> \n<p>(P.S. 소재목들 누르시면 제가 봤던 소스로 들어 가실 수 있습니다!) </p>\n<ol>\n<li><strong><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/let\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">let</a></strong>, <strong><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/const\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">const</a></strong></li>\n<li><strong><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Scope\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">scope</a></strong></li>\n<li><strong><a href=\"https://medium.com/@mandeep1012/function-declarations-vs-function-expressions-b43646042052\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">함수 선언식 vs 함수 표현식</a></strong></li>\n<li><strong><a href=\"(https://joshua1988.github.io/web-development/translation/essential-es6-features-for-vuejs/)%3C/strong%3E\">arrow function vs function</a></li>\n<li><strong><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Object_initializer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">객체 리터럴(object literal)</a></strong></li>\n<li><strong><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">destructuring</a></strong></li>\n<li><strong><a href=\"https://velog.io/@decody/map-%EC%A0%95%EB%A6%AC\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">forEach, map, filter</a></strong></li>\n<li><strong><a href=\"https://poiemaweb.com/js-dom\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">DOM 이란 무엇인가?</a></strong></li>\n<li><strong><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Template_literals\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Template literals</a><br/></strong></li>\n<li><strong><a href=\"https://www.codingfactory.net/11008\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">label</a></strong><br/></li>\n<li><strong><a href=\"https://developer.mozilla.org/ko/docs/Web/HTML/Element/form\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">form</a> <a href=\"http://www.nextree.co.kr/p8428/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">태그</a></strong><br/></li>\n<li><strong><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Number\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Number()</a><br/></strong></li>\n<li><strong><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">===</a><br/></strong> </li>\n<li><strong><a href=\"https://delirussum.tistory.com/35\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">input 태그</a><br/></strong></li>\n<li><strong><a href=\"https://bblog.tistory.com/300\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">findIndex()</a><br/></strong></li>\n<li><strong><a href=\"https://developer.mozilla.org/ko/docs/Web/API/EventTarget/addEventListener\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">addEventListener</a><br/></strong></li>\n<li><strong><a href=\"https://developer.mozilla.org/ko/docs/Web/API/Element/insertAdjacentHTML\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">insertAdjacentHTML</a><br/></strong></li>\n<li><strong><a href=\"https://freshman.tech/todo-list/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">todolist 예제 코드</a></strong></li>\n</ol>\n<hr>\n<p>1.<strong><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/let\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">let</a><br/></strong>\n구문은 블록 유효 범위를 갖는 지역 변수를 선언하며, 선언과 동시에 임의의 값으로 초기화할 수도 있다. <br/>\n블록은 {} 이다<br/>\n<br/>\n변수 선언문이라고 합니다.<br/></p>\n<p><code class=\"language-text\">예시</code>) </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let variable = anything;\n여기서 variable = 변수\nlet = 선언문\nanything = 값\n변수 variable 에 anything 이라는 값을 let 으로 선언.</code></pre></div>\n<p><strong><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/const\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">const</a><br/></strong>\nlet 이랑 비슷한 변수 선언문이지만 ‘초기화’ 가 안된다. 여기서 초기화라는 뜻은 한번 그 값에 할당값을 주면 바꾸지 못한다. 그것을 이 업계에서 ‘초기화’ 가 안된다고 한다.</p>\n<p>결론적으로 let 은 scope 안에서 쓰기 위한 변수 선언문. const 는 let 이랑 비슷하지만 한번 초기화 하면 그 후로 값을 못 바꾼다. 당연 외부에서 바꿀려는 것을 막기 위해서이다.</p>\n<p>*추가로 변수 선언문이라고 하지만 다수 변수나 변수와 함수도 같이 넣을수 있다</p>\n<hr>\n<p>2.<strong><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Scope\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">scope</a><br/></strong>\nscope = 범위<br/>\nscope 단어를 보통 “in the current scope” 라고 쓴다. 그 뜻은 범위 안에 있냐 라는 뜻이다.<br/>\n값이나 표현식이 in the current scope 이면 쓸수 있다는 말이다.<br/>\n<code class=\"language-text\">예시</code>)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{...let x=1231;...}\nconsole.log(x);</code></pre></div>\n<p>여기서 보면 블록 안에 let 선언문으로 x 변수를 1231 로 선언을 했는데 블록 밖에서 log 에 출력하라고 했다. 위에서 말했듯이 let은 블록 안에서 선언 됬다면 밖에서 불러 올수 없다. 그러니 x is not in the current scope 라고 할수 있다. x 를 불러 올려고 했다면 제일 간단한 방법은 블록 밖에서 x 선언을 했던가 log 를 안쪽으로 넣었으면 됬다.</p>\n<p>scope 는 accessability 를 구분하기 위한 것이다.</p>\n<hr>\n<p>3.<strong><a href=\"https://medium.com/@mandeep1012/function-declarations-vs-function-expressions-b43646042052\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">함수 선언식 function declaration / 함수 표현식 function expression</a><br/></strong>\n함수 선언식function declaration is “saved for later use”, and will be executed later, when it is invoked (called). 선언만 되었고 불러서 써야한다.</p>\n<p>함수 표현식function expression. After a function expression has been stored in a variable, the variable can be used as a function. Functions stored in variables do not need function names. They are always invoked (called) using the variable name. 함수 표현식으로 변수 안에 함수를 넣어서 나중에 불러서 쓸수 있다. </p>\n<p>차이점<br/>\nExample: Function Expression</p>\n<p>alert(foo());<br>\nvar foo = function() { return 5; }<br/>\n출력은 “ERROR!  foo wasn’t loaded yet”</p>\n<p>Example: Function Declaration</p>\n<p>alert(foo());<br/>\nfunction foo() { return 5; }<br/>\n출력은 “5”</p>\n<p>Function declarations load before any code is executed while Function expressions load only when the interpreter reaches that line of code.<br/>\n함수 선언식은 코드들을 출력 하기 전에 다 로드가 된 후에 코드들을 실행한다. 반면에 함수 표현식은 그 선언 하는 코드 줄 까지 가야지만 선언 되므로 그전에 불러올시에 바로 에러 뜬다.</p>\n<hr>\n<p>4.<strong><a href=\"https://joshua1988.github.io/web-development/translation/essential-es6-features-for-vuejs/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">화살표 함수arrow function vs 함수function</a></strong></p>\n<p>자바스크립트에서 함수를 생성하기 위해서는 주로 function 키워드를 사용한다\nfunction 키워드는 2가지 방법으로 함수를 생성할 수 있다 </p>\n<li>함수 선언(Function Declaration) </li>\nfunction sayHi(){ \n  console.log(\"hi!\");\n}\n<li>함수 표현(Function Expression)</li>\n무명(anonymous:이름이 없음) 함수를 생성한 후 변수에 담는 방식이다\n<p><code class=\"language-text\">예시)</code><br/></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//일반 함수 표현식\nlet sayHi2 = function()\nconsole.log(&quot;hi!&quot;);\n}\n\n//화살 표함수 표현식\nvar sayHi2 = () =&gt; console.log(&quot;hi!&quot;);</code></pre></div>\n<p> 화살표 함수는 무명 함수를 생성하는 방법 중의 하나로 기본 형태는  (파라메터1, 파라메터2,…) => { 함수내용 }이다.</p>\n<ol>\n<li>함수 내용이 한줄인 경우 함수내용을 감싸는 {}를 사용하지 않아도 된다.</li>\n<li>{}가 없는 경우 해당 함수의 실행결과를 자동으로 이천 한다.</li>\n<li>함수 내용이 한줄 이상인 경우 return을 사용해서 결과를 리턴한다.</li>\n<li>파라메터가 한개인 경우 파라메터를 감싸는 ()를 생략할 수 있다. (파라메터가 없는 경우에는 위의 sayHi2의 경우 처럼 파라메터 없이 빈 ()를 표시하여야 한다.)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//함수 표현\nfilteredArray = myArray.filter(function(element){\n  return element &gt; 2;\n});\n\n//화살표 함수\nfilteredArray = myArray.filter(element =&gt; element &gt; 2);\n\n일반적인 함수\nfunction (인자) {\n\t함수 로직\n}\n\n화살표 함수\n(인자) =&gt; {\n\t함수 로직\n}</code></pre></div>\n<p>결과적으로 이것은 가독성을 위한 일반 함수 선언식 대체용이다.</p>\n<hr>\n<p>5.<strong><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Object_initializer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">객체 리터럴(object literal)</a><br/></strong>\n객체object 에 literal 방식으로 선언할때…<br/>\n가독성용 객체 선언 방식이다.<br/></p>\n<p><a href=\"https://webclub.tistory.com/390\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">예시</code></a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//일반 선언 방식\nvar obj = {}; \nobj.name = &#39;jaehee&#39;;\nobj.age = 10;\nobj.increaseAge = function (i) { \nthis.age + i; \n};\n\n//객체 리터럴 방식\nvar obj = { \nname : &#39;jaehee&#39;, \nage : 10, \nincreaseAge : function (i) { \nthis.age + i; \n} \n};</code></pre></div>\n<p>결국엔 가독성 때문에 사용 하는 일반 방식 대체용이다.</p>\n<hr>\n<p>6.<strong><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">구조 분해 할당destructuring</a></strong></p>\n<p>객체나 배열을 분해하기 위해서 쓰는것.<br/>\n말 그대로 객체난 배열을 나눠야 할때 쓰는게 구조 분해 할당이다.<br/></p>\n<p><code class=\"language-text\">예시</code>)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var o = {p: 42, q: true};\nvar {p: foo, q: bar} = o;\n\nconsole.log(foo); // 42\nconsole.log(bar); // true</code></pre></div>\n<hr>\n<br/>\n<p>7.<strong><a href=\"https://velog.io/@decody/map-%EC%A0%95%EB%A6%AC\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">forEach, map, filter</a></strong><br/></p>\n<li>forEach</li>forEach 는 for 대신 쓰는것이다. for 선언할때\n (let i= 0; i< length; i++;)\n쓰는것을 많이 봤을 것이다. forEach 는 그것 없이 그냥 다 돌리는 것이다\n<p>좀 더 명확하게는<br/>\n<code class=\"language-text\">예시</code>)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//일반적으로 for 은 이렇게 쓴다\nfor (var i = 0; i &lt; arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n        new_arr.push(arr[i])\n}\n//forEach 는 이러하다.\narr.forEach(function (n) {\n    if (n % 2 ===0) {\n        new_arr.push(n)\n    }</code></pre></div>\n<p>그냥 가독성용 밑 편의성용이다.</p>\n<br/>\n<li>map()</li>\n이 메소드는 배열이 있다면 일괄적으로 바꿔주는 메소드이다<br/>\n<p><code class=\"language-text\">예시</code>)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var arr = [&#39;foo&#39;, &#39;hello&#39;, &#39;diamond&#39;, &#39;A&#39;]\nvar arr2 = arr.map((v) =&gt; v.length)\nconsole.log(arr2) </code></pre></div>\n<p>출력값은 [3, 5, 7, 1] 이다.\n뭔가를 일괄적으로 바꿔야할때 이 메소드를 쓰자.\n<br/>\n<br/></p>\n<li>filter()<br/></li>\n요소를 걸러내어 배열로 true/false 반환, 없으면 빈 배열.<br/>\n용어 그대로 원하는거 조건에 맞게 필터 해서 보내준다.<br/>\n<p><code class=\"language-text\">예시</code>)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var arr = [4, 15, 377, 395, 400, 1024, 3000]\nvar arr2 = arr.filter((v) =&gt; (v % 5 === 0))\nconsole.log(arr2)</code></pre></div>\n<p>출력값은 [15, 395, 400, 3000] 이다.<br/>\n배열에 찾는게 있다면 이 메소드를 쓰면 좋겠다.</p>\n<hr>\n<br/>\n<p>8.<strong><a href=\"https://poiemaweb.com/js-dom\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">DOM 문서 객체 모델</a><br/></strong>\n돔,문서 객체 모델, Dom, Document Oriented Model<br/>\n텍스트 파일로 만들어져 있는 웹 문서를 브라우저에 렌더링하려면 웹 문서를 브라우저가 이해할 수 있는 구조로 메모리에 올려야 한다. 브라우저의 렌더링 엔진은 웹 문서를 로드한 후, 파싱하여 웹 문서를 브라우저가 이해할 수 있는 구조로 구성하여 메모리에 적재하는데 이를 DOM이라 한다. 즉 모든 요소와 요소의 어트리뷰트, 텍스트를 각각의 객체로 만들고 이들 객체를 부자 관계를 표현할 수 있는 트리 구조로 구성한 것이 DOM이다. 이 DOM은 자바스크립트를 통해 동적으로 변경할 수 있으며 변경된 DOM은 렌더링에 반영된다.<br/>\n쉽게 말하자면 이러저러한 것들을 다 연결시켜 통합해서 브라우저에 띄울수 있게 하는게 제일 큰 역할이다. 예를들어서 html 태그를 써서 js 로 동적으로 만들어서 css 로 꾸미고 브라우저에 띄우는 과정 등. 이러함으로써 다른 언어들을 연결하고 필요한 기능을 유기적으로 쓸수 있게 한다.</p>\n<hr>\n<p>9.<strong><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Template_literals\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Template literals</a><br/></strong></p>\n<li>내장된 표현식을 허용하는 문자열 리터럴이다\n여러 줄로 이뤄진 문자열과 문자 보간기능을 사용할 수 있다.\n변하는 문자를 쓸려면 template literal 을 써야한다.</li>\n<li>`` 안에 특정한 함수의 값들을 가져올려면 ${}써서 string 으로 불러오는것을 방지할수 있다.</li>\n <br/>\n<hr>\n<p>10.<strong><a href=\"https://www.codingfactory.net/11008\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">label</a></strong><br/></p>\n<li>label은 폼의 양식에 이름 붙이는 태그이다.</li>\n<li>주요 속성은 for다.\nlabel의 for의 값과 양식의 id의 값이 같으면 연결된다.</li>\n<li>label을 클릭하면, 연결된 양식에 입력할 수 있도록 하거나 체크를 하거나 체크를 해제한다.</li>\n<li>이 label 요소는 해당 폼 요소에 어떤 값을 넣어야 하는지 라벨을 붙여주는 요소다</li>\n<br/>\n<hr>\n<p>11.<strong><a href=\"https://developer.mozilla.org/ko/docs/Web/HTML/Element/form\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">form</a> <a href=\"http://www.nextree.co.kr/p8428/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">태그</a></strong><br/></p>\n<li>form 요소에 들어간 속성을 보면, action과 method가 있다. 이 중에 action 속성은 이 폼을 전송할 URL을 지정한다.</li>\n<li>태그 안에 input 를 넣어서 쉽게 입력 창을 띄울 수 있다. </li>\n<li>type text 하면 텍스트 입력창</li>\n<li>type button 하면 버튼</li>\n<br/>\n<hr>\n<p>12.<strong><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Number\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Number()</a><br/></strong></p>\n<li>함수는 문자를 숫자로 바꿔준다</li>\n<br/>\n<hr>\n<p>13.<strong><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">===</a><br/></strong> </p>\n<li>피연산자들이 같은 타입일 때 동등 비교를 하도록 되어있다</li>\n<br/>\n<hr>\n<p>14.<strong><a href=\"https://delirussum.tistory.com/35\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">input 태그</a><br/></strong></p>\n<li>input : 평범하게 글자나 텍스트칸을 넣을 수있는 공간이 생긴다.</li>\n<li>input type=\"\"   : 기존의 input에다가 type를 지정하여 type의 옵션을 넣으면,\n다양한 모양이 된다. 단 입력이나 기타 등등의 모양 꼴로 변한다.</li>\n<li>input type=\"checkbox\" : 이건 체크박스로 나타난다.</li>\n<br/>\n<hr>\n<p>15.<strong><a href=\"https://bblog.tistory.com/300\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">findIndex()</a><br/></strong></p>\n<li>findIndex() 메서드는 주어진 판별 함수를 만족하는 배열의 첫 번째 요소에 대한 인덱스를 반환한다. 만족하는 요소가 없으면 -1을 반환한다.</li>\n<br/>\n<hr>\n<p>16.<strong><a href=\"https://developer.mozilla.org/ko/docs/Web/API/EventTarget/addEventListener\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">addEventListener</a><br/></strong></p>\n<li>addEventListener 를 쓰면 굳이 onclick 같은 html 에 함수를 부르지 않아도 된다.</li>\n<br/>\n<hr>\n<p>17.<strong><a href=\"https://developer.mozilla.org/ko/docs/Web/API/Element/insertAdjacentHTML\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">insertAdjacentHTML</a><br/></strong></p>\n<li>insertAdjacentHTML() 로 웹에 간단하게 출력할수 있다.\n</li>\n<hr>\n<p>18.<strong><a href=\"https://freshman.tech/todo-list/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TodoList 예제 코드</a></strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let todoItems = [];\n\nfunction addTodo(text) {\n  const todo = {\n    text,\n    checked: false,\n    id: Date.now(),\n  };\n\n  todoItems.push(todo);\n\n  const list = document.querySelector(&#39;.js-todo-list&#39;);\n  list.insertAdjacentHTML(&#39;beforeend&#39;, `\n    &lt;li class=&quot;todo-item&quot; data-key=&quot;${todo.id}&quot;&gt;\n      &lt;input id=&quot;${todo.id}&quot; type=&quot;checkbox&quot;/&gt;\n      &lt;label for=&quot;${todo.id}&quot; class=&quot;tick js-tick&quot;&gt;&lt;/label&gt;\n      &lt;span&gt;${todo.text}&lt;/span&gt;\n      &lt;button class=&quot;delete-todo js-delete-todo&quot;&gt;\n        &lt;svg&gt;&lt;use href=&quot;#delete-icon&quot;&gt;&lt;/use&gt;&lt;/svg&gt;\n      &lt;/button&gt;\n    &lt;/li&gt;\n  `);\n}\n\nfunction toggleDone(key) {\n  const index = todoItems.findIndex(item =&gt; item.id === Number(key));\n  todoItems[index].checked = !todoItems[index].checked;\n\n  const item = document.querySelector(`[data-key=&#39;${key}&#39;]`);\n  if (todoItems[index].checked) {\n    item.classList.add(&#39;done&#39;);\n  } else {\n    item.classList.remove(&#39;done&#39;);\n  }\n}\n\nfunction deleteTodo(key) {\n  todoItems = todoItems.filter(item =&gt; item.id !== Number(key));\n  const item = document.querySelector(`[data-key=&#39;${key}&#39;]`);\n  item.remove();\n}\n\nconst form = document.querySelector(&#39;.js-form&#39;);\nform.addEventListener(&#39;submit&#39;, event =&gt; {\n  event.preventDefault();\n  const input = document.querySelector(&#39;.js-todo-input&#39;);\n\n  const text = input.value.trim();\n  if (text !== &#39;&#39;) {\n    addTodo(text);\n    input.value = &#39;&#39;;\n    input.focus();\n  }\n});\n\nconst list = document.querySelector(&#39;.js-todo-list&#39;);\nlist.addEventListener(&#39;click&#39;, event =&gt; {\n  if (event.target.classList.contains(&#39;js-tick&#39;)) {\n    const itemKey = event.target.parentElement.dataset.key;\n    toggleDone(itemKey);\n  }\n\n  if (event.target.classList.contains(&#39;js-delete-todo&#39;)) {\n    const itemKey = event.target.parentElement.dataset.key;\n    deleteTodo(itemKey);\n  }\n\n});</code></pre></div>\n<hr>\n<p>좋은 하루 되세요!</p>"}