{"expireTime":9007200837854416000,"key":"transformer-remark-markdown-html-012a59ca4361806aed578521f7f0f5ed-gatsby-remark-relative-imagesgatsby-remark-katexgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-external-links-","val":"<p>오늘은 todolist에 페이지 나누기를 하고 짝 프로그래밍 후 todolist 의 예제를 봤습니다.</p>\n<hr>\n<h3>Facts</h3>\n<p><strong>오브젝트로 전달하기</strong></p>\n<p><code class=\"language-text\">예시</code>)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">input<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">124</span>\n<span class=\"token keyword\">const</span> title <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n<span class=\"token function\">addTodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> title <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {title: \"124\"}</span></code></pre></div>\n<p><strong><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Spread_syntax\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">전개 구문</a></strong></p>\n<p>전개 구문을 사용하면 배열이나 문자열과 같이 반복 가능한 문자를 0개 이상의 인수 (함수로 호출할 경우) 또는 요소 (배열 리터럴의 경우)로 확장하여, 0개 이상의 키-값의 쌍으로 객체로 확장시킬 수 있습니다.</p>\n<p><code class=\"language-text\">예시</code>)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> numbers1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> numbers2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">...</span>numbers1<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this will be [1, 2, 3, 4, 5, 1, 2, 6, 7, 8]</span></code></pre></div>\n<p><strong><a href=\"https://developer.mozilla.org/ko/docs/Web/API/Window/localStorage\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">localStorage</a></strong></p>\n<p>읽기 전용 localStorage속성은 사용자 로컬의 Storage객체에 접근하게 해줍니다. 모든 key와 value는 항상 string으로 저장됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'savedarray'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// saavedarray 라는 로컬 스토레이지에 string 으로 변환한 array 를 넣어줌.</span>\n\n<span class=\"token keyword\">let</span> calledarray <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'savedarray'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// calledarray 라는 새로운 오브젝트에 localStorage 에서 가져온 savedarray 를 array 로 변환해서 저장함.</span>\n   </code></pre></div>\n<p><strong><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Property_Accessors\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">속성 접근자 property accessors</a></strong></p>\n<p>속성 접근자는 점 또는 괄호 표기법으로 객체의 속성에 접근할 수 있도록 해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nperson<span class=\"token punctuation\">[</span><span class=\"token string\">'firstname'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Mario'</span><span class=\"token punctuation\">;</span>\nperson<span class=\"token punctuation\">[</span><span class=\"token string\">'lastname'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Rossi'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>firstname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// expected output: \"Mario\"</span>\n\nperson <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'firstname'</span><span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'lastname'</span><span class=\"token operator\">:</span> <span class=\"token string\">'Doe'</span><span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">[</span><span class=\"token string\">'lastname'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// expected output: \"Doe\"</span></code></pre></div>\n<hr>\n<h3>Feelings</h3>\n역시 짝 프로그래밍은 너무 어렵네요.\n<hr>\n<h3>Findings</h3>\n짝 프로그래밍때 의견을 표출을 안하면 점점 산으로 간다. \n<p>때로는 이미 한거에 추가 하는것 보단 새로 하는게 더 빠르다.</p>\n<hr>\n<h3>Future Action Plan</h3> \n의견 교환을 활발히 합시다.\n<hr>\n<h3>Feedback</h3> \n저도 감기...?\n<hr>"}