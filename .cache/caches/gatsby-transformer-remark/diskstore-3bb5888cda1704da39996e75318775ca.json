{"expireTime":9007200853624922000,"key":"transformer-remark-markdown-html-ast-75ee13c3af9fa0cdf7948a28bb17a778-gatsby-remark-relative-imagesgatsby-remark-katexgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-external-links-","val":{"type":"root","children":[{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In computer science, functional programming is a programming paradigm—a style of building the structure and elements of computer programs—that treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data. It is a declarative programming paradigm in that programming is done with expressions or declarations","position":{"start":{"line":2,"column":2,"offset":2},"end":{"line":2,"column":353,"offset":353}}},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Functional_programming","target":"_blank","rel":"nofollow noopener noreferrer"},"children":[{"type":"text","value":"1","position":{"start":{"line":2,"column":354,"offset":354},"end":{"line":2,"column":355,"offset":355}}}],"position":{"start":{"line":2,"column":353,"offset":353},"end":{"line":2,"column":356,"offset":356}}},{"type":"text","value":" instead of statements. In functional code, the output value of a function depends only on its arguments, so calling a function with the same value for an argument always produces the same result.\n— ","position":{"start":{"line":2,"column":356,"offset":356},"end":{"line":3,"column":6,"offset":558}}},{"type":"raw","value":"<cite>","position":{"start":{"line":3,"column":6,"offset":558},"end":{"line":3,"column":12,"offset":564}}},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Functional_programming","target":"_blank","rel":"nofollow noopener noreferrer"},"children":[{"type":"text","value":"Wikipedia","position":{"start":{"line":3,"column":13,"offset":565},"end":{"line":3,"column":22,"offset":574}}}],"position":{"start":{"line":3,"column":12,"offset":564},"end":{"line":3,"column":26,"offset":578}}},{"type":"raw","value":"</cite>","position":{"start":{"line":3,"column":26,"offset":578},"end":{"line":3,"column":33,"offset":585}}}],"position":{"start":{"line":2,"column":2,"offset":2},"end":{"line":3,"column":33,"offset":585}}},{"type":"text","value":"\n"}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":3,"column":33,"offset":585}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"함수형 프로그래밍은 이렇게 정의합니다. 번역을해보자면 함수형의 설계 방식은 계산적인 것들은 수학적 함수의 평가로 정의하고 데이터 변이와 상태 변화를 피합니다. 그리고 선언으로 이루어져 있음으로 선언적 함수입니다. 고로 함수는 멱등성을 지킵니다.  ","position":{"start":{"line":7,"column":1,"offset":645},"end":{"line":7,"column":139,"offset":783}}}],"position":{"start":{"line":7,"column":1,"offset":645},"end":{"line":7,"column":139,"offset":783}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"기능적 프로그래밍에는 가변 변수, 할당, 명령형 구조가 없습니다. 함수에 집중하고 변수들은 어디에서 정의가 되고 다른 함수 내에서도 정의하고 매개변수로 전달이 가능하고 결괏값을 돌려줄 수 있습니다.","position":{"start":{"line":9,"column":1,"offset":785},"end":{"line":9,"column":111,"offset":895}}}],"position":{"start":{"line":9,"column":1,"offset":785},"end":{"line":9,"column":111,"offset":895}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"이 함수형 장점이라고 하면 당연히 선언적 함수에서 말했던 장점들과","position":{"start":{"line":11,"column":1,"offset":897},"end":{"line":11,"column":37,"offset":933}}}],"position":{"start":{"line":11,"column":1,"offset":897},"end":{"line":11,"column":37,"offset":933}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"순수함수는 추론하기가 더 쉽습니다.","position":{"start":{"line":13,"column":3,"offset":937},"end":{"line":13,"column":22,"offset":956}}}],"position":{"start":{"line":13,"column":3,"offset":937},"end":{"line":13,"column":22,"offset":956}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"순수 함수는 뭐가 되는지와 안되는지 구분이 되므로 입력과 출력을 확실하게 알 수 있습니다.","position":{"start":{"line":14,"column":5,"offset":961},"end":{"line":14,"column":55,"offset":1011}}}],"position":{"start":{"line":14,"column":3,"offset":959},"end":{"line":14,"column":55,"offset":1011}}},{"type":"text","value":"\n"}],"position":{"start":{"line":14,"column":3,"offset":959},"end":{"line":14,"column":55,"offset":1011}}},{"type":"text","value":"\n"}],"position":{"start":{"line":13,"column":1,"offset":935},"end":{"line":14,"column":55,"offset":1011}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"테스트가 더 쉽고, 순기능이 속성 기반 테스트와 같은 기술에 잘 적응합니다.","position":{"start":{"line":15,"column":3,"offset":1014},"end":{"line":15,"column":45,"offset":1056}}}],"position":{"start":{"line":15,"column":3,"offset":1014},"end":{"line":15,"column":45,"offset":1056}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"명령형과 달리 순수 함수는 숨겨진 상태와 side effect에 대하여 걱정을 할 필요가 없습니다.","position":{"start":{"line":16,"column":5,"offset":1061},"end":{"line":16,"column":60,"offset":1116}}}],"position":{"start":{"line":16,"column":3,"offset":1059},"end":{"line":16,"column":60,"offset":1116}}},{"type":"text","value":"\n"}],"position":{"start":{"line":16,"column":3,"offset":1059},"end":{"line":16,"column":60,"offset":1116}}},{"type":"text","value":"\n"}],"position":{"start":{"line":15,"column":1,"offset":1012},"end":{"line":16,"column":60,"offset":1116}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"디버깅이 더 간편합니다","position":{"start":{"line":17,"column":3,"offset":1119},"end":{"line":17,"column":15,"offset":1131}}}],"position":{"start":{"line":17,"column":3,"offset":1119},"end":{"line":17,"column":15,"offset":1131}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"순수 함수로써 입력이 출력을 좌우하므로 디버깅이 쉽습니다.","position":{"start":{"line":18,"column":5,"offset":1136},"end":{"line":18,"column":37,"offset":1168}}}],"position":{"start":{"line":18,"column":3,"offset":1134},"end":{"line":18,"column":37,"offset":1168}}},{"type":"text","value":"\n"}],"position":{"start":{"line":18,"column":3,"offset":1134},"end":{"line":18,"column":37,"offset":1168}}},{"type":"text","value":"\n"}],"position":{"start":{"line":17,"column":1,"offset":1117},"end":{"line":18,"column":37,"offset":1168}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"프로그램은 더 안전합니다.","position":{"start":{"line":19,"column":3,"offset":1171},"end":{"line":19,"column":17,"offset":1185}}}],"position":{"start":{"line":19,"column":3,"offset":1171},"end":{"line":19,"column":17,"offset":1185}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"가변변수와 hidden state가 적습니다.","position":{"start":{"line":20,"column":5,"offset":1190},"end":{"line":20,"column":30,"offset":1215}}}],"position":{"start":{"line":20,"column":3,"offset":1188},"end":{"line":20,"column":30,"offset":1215}}},{"type":"text","value":"\n"}],"position":{"start":{"line":20,"column":3,"offset":1188},"end":{"line":20,"column":30,"offset":1215}}},{"type":"text","value":"\n"}],"position":{"start":{"line":19,"column":1,"offset":1169},"end":{"line":20,"column":30,"offset":1215}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"프로그램은 상위 레벨에서 작성되므로 이해하기 쉽습니다.","position":{"start":{"line":21,"column":3,"offset":1218},"end":{"line":21,"column":33,"offset":1248}}}],"position":{"start":{"line":21,"column":3,"offset":1218},"end":{"line":21,"column":33,"offset":1248}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"코드 그대로 읽기가 쉽습니다.","position":{"start":{"line":22,"column":5,"offset":1253},"end":{"line":22,"column":21,"offset":1269}}}],"position":{"start":{"line":22,"column":3,"offset":1251},"end":{"line":22,"column":21,"offset":1269}}},{"type":"text","value":"\n"}],"position":{"start":{"line":22,"column":3,"offset":1251},"end":{"line":22,"column":21,"offset":1269}}},{"type":"text","value":"\n"}],"position":{"start":{"line":21,"column":1,"offset":1216},"end":{"line":22,"column":21,"offset":1269}}},{"type":"text","value":"\n"}],"position":{"start":{"line":13,"column":1,"offset":935},"end":{"line":22,"column":21,"offset":1269}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"함수형을 조금 더 코드 레벨로 들어가서 봅시다.","position":{"start":{"line":25,"column":1,"offset":1272},"end":{"line":25,"column":27,"offset":1298}}}],"position":{"start":{"line":25,"column":1,"offset":1272},"end":{"line":25,"column":27,"offset":1298}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"함수형 프로그래밍은 “first class citizen” 입니다.","position":{"start":{"line":27,"column":1,"offset":1300},"end":{"line":27,"column":38,"offset":1337}}}],"position":{"start":{"line":27,"column":1,"offset":1300},"end":{"line":27,"column":38,"offset":1337}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//변수에 할당</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//객체에 할당</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//배열에 할당</span>\n<span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token parameter\">input</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//함수에 할당</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fn3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fn3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">fn2</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//함수에 return</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token parameter\">input</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> fn <span class=\"token operator\">=</span> <span class=\"token function\">createFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":29,"column":1,"offset":1339},"end":{"line":58,"column":4,"offset":1782}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"함수형은 이러한 기능들이 있습니다.","position":{"start":{"line":60,"column":1,"offset":1784},"end":{"line":60,"column":20,"offset":1803}}}],"position":{"start":{"line":60,"column":1,"offset":1784},"end":{"line":60,"column":20,"offset":1803}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"함수형은 선언적 프로그래밍 접근방식을 쓰고 루프 사용을 피하고 대신 map, reduce 및 filter와 같은 함수형 프로그래밍 구조를 사용합니다. 왜냐하면 이러함으로써 더 추상적이고 덜 복잡하게 프로그램에서 명령을 하달하기 때문입니다.","position":{"start":{"line":62,"column":1,"offset":1805},"end":{"line":62,"column":134,"offset":1938}}}],"position":{"start":{"line":62,"column":1,"offset":1805},"end":{"line":62,"column":134,"offset":1938}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"함수형의 특징 하나를 더 말하자면 변경불가성입니다. 함수형 프로그래밍에서는 데이터가 절대 변경되지 않습니다. 자료는 불변의 것이고 변수는 바꿀 수 없습니다. 값을 업데이트하려면 새 변수를 생성해야 합니다. 배열에서 새 배열을 만들고 객체는 변경 전 복사가 됩니다.","position":{"start":{"line":64,"column":1,"offset":1940},"end":{"line":64,"column":148,"offset":2087}}}],"position":{"start":{"line":64,"column":1,"offset":1940},"end":{"line":64,"column":148,"offset":2087}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">예시</code>","position":{"start":{"line":66,"column":1,"offset":2089},"end":{"line":66,"column":5,"offset":2093}}},{"type":"element","tagName":"br","properties":{},"children":[],"position":{"start":{"line":66,"column":5,"offset":2093},"end":{"line":67,"column":1,"offset":2096}}},{"type":"text","value":"\n"},{"type":"text","value":"array.push 대신 함수형에서는 concat를 씁니다.","position":{"start":{"line":67,"column":1,"offset":2096},"end":{"line":67,"column":34,"offset":2129}}}],"position":{"start":{"line":66,"column":1,"offset":2089},"end":{"line":67,"column":34,"offset":2129}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'asd'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'bcd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// b = ['bcd', 'asd']</span>\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// c = ['asd', '3']</span></code></pre></div>","position":{"start":{"line":69,"column":1,"offset":2131},"end":{"line":75,"column":4,"offset":2258}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"위에 말했듯이 데이터들은 복사해서 저장됩니다.","position":{"start":{"line":77,"column":1,"offset":2260},"end":{"line":77,"column":26,"offset":2285}}}],"position":{"start":{"line":77,"column":1,"offset":2260},"end":{"line":77,"column":26,"offset":2285}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">예시</code>","position":{"start":{"line":79,"column":1,"offset":2287},"end":{"line":79,"column":5,"offset":2291}}}],"position":{"start":{"line":79,"column":1,"offset":2287},"end":{"line":79,"column":5,"offset":2291}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> v <span class=\"token operator\">*</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// b = [0, 2, 6]</span></code></pre></div>","position":{"start":{"line":81,"column":1,"offset":2293},"end":{"line":85,"column":4,"offset":2380}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"또 다른 특징중 하나는 recursion 재귀입니다. 자기 자신을 다시 불러오는 게 재귀입니다.","position":{"start":{"line":87,"column":1,"offset":2382},"end":{"line":87,"column":54,"offset":2435}}}],"position":{"start":{"line":87,"column":1,"offset":2382},"end":{"line":87,"column":54,"offset":2435}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">recursive</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">recursive</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":89,"column":1,"offset":2437},"end":{"line":96,"column":4,"offset":2522}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"해서 10이 될 때까지 계속 자신을 불러옵니다.","position":{"start":{"line":98,"column":1,"offset":2524},"end":{"line":98,"column":27,"offset":2550}}}],"position":{"start":{"line":98,"column":1,"offset":2524},"end":{"line":98,"column":27,"offset":2550}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"다른 특징 중 하나는 Composition입니다. Composition은 함수를 다른 함수 불러와서 쓸 수 있습니다.","position":{"start":{"line":100,"column":1,"offset":2552},"end":{"line":100,"column":66,"offset":2617}}}],"position":{"start":{"line":100,"column":1,"offset":2552},"end":{"line":100,"column":66,"offset":2617}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">obj<span class=\"token punctuation\">.</span><span class=\"token function\">do1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">.</span><span class=\"token function\">do2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":102,"column":1,"offset":2619},"end":{"line":105,"column":4,"offset":2656}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"혹은","position":{"start":{"line":106,"column":1,"offset":2657},"end":{"line":106,"column":3,"offset":2659}}}],"position":{"start":{"line":106,"column":1,"offset":2657},"end":{"line":106,"column":3,"offset":2659}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">obj<span class=\"token punctuation\">.</span><span class=\"token function\">do1</span><span class=\"token punctuation\">(</span><span class=\"token function\">do2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":107,"column":1,"offset":2660},"end":{"line":109,"column":4,"offset":2692}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"이러한 장점들과 기능들을 제공함으로써 보다 다방면적으로 코딩을 작성을 할 수 있습니다.","position":{"start":{"line":111,"column":1,"offset":2694},"end":{"line":111,"column":49,"offset":2742}}}],"position":{"start":{"line":111,"column":1,"offset":2694},"end":{"line":111,"column":49,"offset":2742}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"그래도 누가 뭐라 해도 제일 중요한 이유는 React는 함수형 프로그래밍이기 때문입니다.","position":{"start":{"line":113,"column":1,"offset":2744},"end":{"line":113,"column":50,"offset":2793}}}],"position":{"start":{"line":113,"column":1,"offset":2744},"end":{"line":113,"column":50,"offset":2793}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"References:","position":{"start":{"line":115,"column":1,"offset":2795},"end":{"line":115,"column":12,"offset":2806}}}],"position":{"start":{"line":115,"column":1,"offset":2795},"end":{"line":115,"column":12,"offset":2806}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://danielpedroso.com/2019/02/25/functional-programming-and-react/","target":"_blank","rel":"nofollow noopener noreferrer"},"children":[{"type":"text","value":"https://danielpedroso.com/2019/02/25/functional-programming-and-react/","position":{"start":{"line":117,"column":2,"offset":2809},"end":{"line":117,"column":72,"offset":2879}}}],"position":{"start":{"line":117,"column":1,"offset":2808},"end":{"line":117,"column":73,"offset":2880}}}],"position":{"start":{"line":117,"column":1,"offset":2808},"end":{"line":117,"column":73,"offset":2880}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.epfl.ch/labs/lamp/wp-content/uploads/2019/01/week1-1-no-annot.pdf","target":"_blank","rel":"nofollow noopener noreferrer"},"children":[{"type":"text","value":"https://www.epfl.ch/labs/lamp/wp-content/uploads/2019/01/week1-1-no-annot.pdf","position":{"start":{"line":119,"column":2,"offset":2883},"end":{"line":119,"column":79,"offset":2960}}}],"position":{"start":{"line":119,"column":1,"offset":2882},"end":{"line":119,"column":80,"offset":2961}}}],"position":{"start":{"line":119,"column":1,"offset":2882},"end":{"line":119,"column":80,"offset":2961}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://1ambda.github.io/scala/functional-programming-1/","target":"_blank","rel":"nofollow noopener noreferrer"},"children":[{"type":"text","value":"https://1ambda.github.io/scala/functional-programming-1/","position":{"start":{"line":121,"column":2,"offset":2964},"end":{"line":121,"column":58,"offset":3020}}}],"position":{"start":{"line":121,"column":1,"offset":2963},"end":{"line":121,"column":59,"offset":3021}}}],"position":{"start":{"line":121,"column":1,"offset":2963},"end":{"line":121,"column":59,"offset":3021}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://alvinalexander.com/scala/fp-book/benefits-of-functional-programming","target":"_blank","rel":"nofollow noopener noreferrer"},"children":[{"type":"text","value":"https://alvinalexander.com/scala/fp-book/benefits-of-functional-programming","position":{"start":{"line":123,"column":2,"offset":3024},"end":{"line":123,"column":77,"offset":3099}}}],"position":{"start":{"line":123,"column":1,"offset":3023},"end":{"line":123,"column":78,"offset":3100}}}],"position":{"start":{"line":123,"column":1,"offset":3023},"end":{"line":123,"column":78,"offset":3100}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://flaviocopes.com/javascript-functional-programming/","target":"_blank","rel":"nofollow noopener noreferrer"},"children":[{"type":"text","value":"https://flaviocopes.com/javascript-functional-programming/","position":{"start":{"line":125,"column":2,"offset":3103},"end":{"line":125,"column":60,"offset":3161}}}],"position":{"start":{"line":125,"column":1,"offset":3102},"end":{"line":125,"column":61,"offset":3162}}}],"position":{"start":{"line":125,"column":1,"offset":3102},"end":{"line":125,"column":61,"offset":3162}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://reactpatterns.github.io/Functional-setState-(Pass-a-function-to-setState)/","target":"_blank","rel":"nofollow noopener noreferrer"},"children":[{"type":"text","value":"https://reactpatterns.github.io/Functional-setState-(Pass-a-function-to-setState)/","position":{"start":{"line":127,"column":2,"offset":3165},"end":{"line":127,"column":84,"offset":3247}}}],"position":{"start":{"line":127,"column":1,"offset":3164},"end":{"line":127,"column":85,"offset":3248}}}],"position":{"start":{"line":127,"column":1,"offset":3164},"end":{"line":127,"column":85,"offset":3248}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/SeonHyungJo/FE-Dev-Note/blob/master/Functional_Programming/setState.md","target":"_blank","rel":"nofollow noopener noreferrer"},"children":[{"type":"text","value":"https://github.com/SeonHyungJo/FE-Dev-Note/blob/master/Functional_Programming/setState.md","position":{"start":{"line":129,"column":2,"offset":3251},"end":{"line":129,"column":91,"offset":3340}}}],"position":{"start":{"line":129,"column":1,"offset":3250},"end":{"line":129,"column":92,"offset":3341}}}],"position":{"start":{"line":129,"column":1,"offset":3250},"end":{"line":129,"column":92,"offset":3341}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":130,"column":1,"offset":3342}}}}