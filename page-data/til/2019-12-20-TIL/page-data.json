{"componentChunkName":"component---src-templates-til-template-js","path":"/til/2019-12-20-TIL/","result":{"data":{"markdownRemark":{"id":"7fc3dd16-b19f-5412-8d95-9437ca81276a","html":"<p>sync는 결괏값이 올 때까지 기다린다.</p>\n<p>asyc는 결괏값이 안 와도 다른 작업을 실행할 수 있다.</p>\n<p>async 예를 들자면 카드 결제하면 결제 프로세스가 다 될 때까지 기다리지 않고 다른 작업을 할 수도 있다.</p>\n<p>sync 예시를 들면 그러나 마트 가서 현금을 내면 현금을 거슬러 줄 때 가지 아무것도 못한다.</p>\n<p>콜백 함수는 다른 함수에 대한 인수로서 전달되는 함수로서, 나중에 “뒤로 호출”하는 기능이다. 다른 기능을 인수로 받아들이는 함수를 고차 함수라고 하는데,콜백 함수가 실행될 때의 논리를 담고 있다.  </p>\n<p>콜백은 함수 안에 함수를 전달인자로 보내고 그래서 나중에 쓸 수 있게끔 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">serverRequest</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">query<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">var</span> response <span class=\"token operator\">=</span> query <span class=\"token operator\">+</span> <span class=\"token string\">\"full!\"</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'4'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getResults</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">results</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Response from the server: \"</span> <span class=\"token operator\">+</span> results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'5'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">serverRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The glass is half \"</span><span class=\"token punctuation\">,</span> getResults<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'6'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 4</span>\n<span class=\"token comment\">// 5</span>\n<span class=\"token comment\">// 6</span>\n<span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token comment\">// Response from the server: The glass is half full!</span>\n<span class=\"token comment\">// 3</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">serverRequest</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">query<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> response <span class=\"token operator\">=</span> query <span class=\"token operator\">+</span> <span class=\"token string\">\"full!\"</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'4'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getResults</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">results</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Response from the server: \"</span> <span class=\"token operator\">+</span> results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'5'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">serverRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The glass is half \"</span><span class=\"token punctuation\">,</span> getResults<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'6'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Result in console after 5 second delay:</span>\n<span class=\"token comment\">// Response from the server: The glass is half full!</span>\n<span class=\"token comment\">//   4</span>\n<span class=\"token comment\">//   5</span>\n<span class=\"token comment\">//   1</span>\n<span class=\"token comment\">//   2</span>\n<span class=\"token comment\">// Response from the server: The glass is half full!</span>\n<span class=\"token comment\">//   3</span>\n<span class=\"token comment\">//   6</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'4'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//2</span>\n<span class=\"token comment\">//3</span>\n<span class=\"token comment\">//4</span>\n<span class=\"token comment\">//1</span></code></pre></div>\n<p>setTimeout function 또한 callback의 한 종류이다.</p>\n<p>callback로 하면 a->b->c->d로 갈려고 하면\na(b(c(d))) 가 되므로 결국엔 콜백헬이 된다.</p>\n<p>Promise</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">let</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"done!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// resolve runs the first function in .then</span>\n      promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n        <span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// shows \"done!\" after 1 second</span>\n        <span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>error <span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// doesn't run</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// shows \"done!1\" after 1 second</span></code></pre></div>\n<p>그래서 나온 게 promise 이긴 한데\npromise a.then(c) =>).then … 해서 길어지면 치기 힘들어진다 그래서 결국에 나온 게 Async Await</p>\n<p>await promise1\nawait promise2\nawait promise3</p>\n<p>등</p>\n<p>reference:</p>\n<p><a href=\"https://medium.com/javascript-in-plain-english/truly-understanding-promises-in-javascript-cb31ee487860\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/javascript-in-plain-english/truly-understanding-promises-in-javascript-cb31ee487860</a></p>\n<p><a href=\"https://medium.com/javascript-in-plain-english/async-await-javascript-5038668ec6eb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/javascript-in-plain-english/async-await-javascript-5038668ec6eb</a></p>\n<p><a href=\"https://guide.freecodecamp.org/javascript/callback-functions/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://guide.freecodecamp.org/javascript/callback-functions/</a></p>\n<p><a href=\"https://javascript.info/promise-basics\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://javascript.info/promise-basics</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Callback_(computer_programming)\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://en.wikipedia.org/wiki/Callback_(computer_programming)</a></p>\n<p><a href=\"https://joshua1988.github.io/web-development/javascript/promise-for-beginners/#%ED%94%84%EB%A1%9C%EB%AF%B8%EC%8A%A4-%EC%BD%94%EB%93%9C---%EA%B8%B0%EC%B4%88\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://joshua1988.github.io/web-development/javascript/promise-for-beginners/#%ED%94%84%EB%A1%9C%EB%AF%B8%EC%8A%A4-%EC%BD%94%EB%93%9C---%EA%B8%B0%EC%B4%88</a></p>\n<hr>\n<h3 id=\"feelings\" style=\"position:relative;\"><a href=\"#feelings\" aria-label=\"feelings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Feelings</h3>\n<p>역시 코딩은 어렵네요 힘듭니다</p>\n<hr>\n<h3 id=\"findings\" style=\"position:relative;\"><a href=\"#findings\" aria-label=\"findings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Findings</h3>\n<p>코드들을 쉬운 것부터 해야지 배울 수 있다고 알았습니다.</p>\n<hr>\n<h3 id=\"future-action-plan\" style=\"position:relative;\"><a href=\"#future-action-plan\" aria-label=\"future action plan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Future Action Plan</h3>\n<p>쉬운 코드를 같은 것을 계속 보면서 다른 방법으로 풀어보겠습니다.</p>\n<hr>\n<h3 id=\"feedback\" style=\"position:relative;\"><a href=\"#feedback\" aria-label=\"feedback permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Feedback</h3>\n<p>열심히 하도록.</p>\n<hr>","fields":{"slug":"/til/2019-12-20-TIL/","tagSlugs":null},"frontmatter":{"date":null,"description":"","tags":null,"title":"19-12-20","socialImage":null}}},"pageContext":{"slug":"/til/2019-12-20-TIL/"}}}